Exit Strategie Rosetta
======================
:lang: de
:encoding: utf-8
:date: 2013-05-09
:author: Andreas Romeyke
:toc:

.Erzeugen HTML-Version dieses Dokumentes
[TIP]
===============================================================================
Nutzen Sie folgenden Aufruf um eine HTML-Version dieses Dokumentes zu
erzeugen:

[source,bash]
$> asciidoc exit_strategie.txt

Dies erzeugt die Datei 'exit_strategie.html'
===============================================================================


== Ziel

Um die Verfügbarkeit der langzeitarchivierten Daten auch bei einem wie auch
immer verursachten Wegfall des Rosetta-Systems sicherzustellen, ist es
notwendig, rechtzeitig Vorsorge zu treffen.

Im Team wurde dazu folgende Vorgehensweise vereinbart:

. Perl-Script, welches über das '/permanent_storage' Verzeichnis wandert
. dabei die 'IE.xml' Dateien parst
. und ein SQL-Script produziert
. welches Standard-SQL Befehle für den Aufbau einer Datenbank generiert

Der Hintergrund der Entscheidung nicht direkt aus dem Perl-Script heraus die
Datenbank zu befeuern (zB. mittels dbi-Treiber) ist, daß man

. keine Treiber-Module im Perl-Script nachpflegen muß
. falls man eine DB nicht hinbekommt, wenigstens schon eine menschen- und 
  maschinenlesbare Textdatei hat, die notfalls durchsuchbar ist 
. man nicht erst Firewall-Regeln umbiegen muß um dem Script eine 
  Datenbankverbindung zu ermöglichen

== Datenbankschema

Die zu erzeugende Datenbank soll dabei die DublinCore-Elemente der DMD-Section
der AIP-Pakete (aus 'IE.xml' Dateien), den Namen, den tatsächlichen
Speicherpfad der einzelnen Dateien und die Kopie enthalten.

Aus Performancegründen wird die Lage der 'ie.xml' Dateien in von den sonstigen
Dateien getrennten Tabellen verwaltet.

Auf die Speicherung der Prüfsummen der Dateien wird verzichtet, da im System 3
bzw. 4 Kopien der Dateien (inklusive 'ie.xml') vorliegen und so im Falle einer
Datenkorruption beim Ingest ein Mehrheitsentscheid zur Sicherstellung der
Korrektheit ausreichend ist.

.Entity Relationship Modell
[ditaa]
----------------------------------------------------------------------------
                          1 +---------------+ 1
                      +---->| AIP           |<----+
                      |  +->+---------------+     |
                      |  | 1| *ID* (ID)     |     |
                      |  |  | IE_ID (string)|     |
                      |  |  +---------------+     |   +------------------+
                      |  |                        |   | DC               |
                      |  |  +---------------+ 1   |   +------------------+
+---------------+     |  |  | SOURCEDATAFILE|<-+  | n | *ID* (ID)        |
| METADATAFILE  |     |  |  +---------------+  |  +---| AIP_ID (ID)      |
+---------------+     |  | n| *ID* (ID)     |  |      | ELEMENT (string) |
| *ID* (ID)     |n    |  +--| AIP_ID (ID)   |  |      | VALUE (string)   |
| AIP_ID (ID)   |-----+     | NAME (string) |  |      +------------------+
| LOCATION      |           +---------------+  |
|       (string)|                              |
| SOURCETYPE    |                              |
|       (string)|                              |
+---------------+                              |
                            +---------------+  |
                            |SOURCEDATALOCAT|  |
                            +---------------+  |
                            | *ID* (ID)     |n |
                            | FILE_ID (ID)  |--+
                            | LOCATION      |
                            |       (string)|
                            | SOURCETYPE    |
                            |       (string)|
                            +---------------+

----------------------------------------------------------------------------

Es gibt pro AIP-Eintrag in der 'AIP' Tabelle eins oder mehrere 'METADATAFILE', 
welches die Lage der ExLibris-Rosetta-METS/MODS Datei beschreiben. Wenn mehrere
Kopien abgelegt sind, gibt es mehrere Einträge.

Auch die 'SOURCEDATAFILE'-Tabelle beschreibt mehrere Roh-Dateien (zB. die
gescannten TIFFS der einzelnen Buchseiten), deren Kopienspeicherorte aber in 
der Tabelle 'SOURCEDATALOCAT' hinterlegt sind.

Die wichtigsten bibliographischen Metadaten zur Suche sind in der
'DC'-Tabelle hinterlegt.

[WARNING]
============================================================================
Da der SQL-Standard keine Angaben zum Erzeugen einer Datenbank macht,
muß das Anlegen einer Datenbank (zB. durch Anweisung 'CREATE
DATABASE…') und die Zuweisung der Benutzerrechte vor dem Einlesen des
Scriptes erfolgen.
============================================================================



Das Script erzeugt dann SQL-Anweisungen, die pro AIP-Eintrag
als Transaktion geklammert werden.  Ein Auszug des erzeugten SQL-Scriptes:

.SQL-Script
[source,sql]
----------------------------------------------------------------------------

BEGIN;
/* create SEQUENCE generator */
CREATE SEQUENCE serial START 1;
/* create AIP table */
CREATE TABLE aip (
	id INT PRIMARY KEY DEFAULT nextval('serial'),
	ie_id VARCHAR(30) NOT NULL UNIQUE
);
/* create IEFILE table */
CREATE TABLE metadatafile (
	id INT PRIMARY KEY DEFAULT nextval('serial'),
	aip_id INT NOT NULL REFERENCES aip (id),
	location VARCHAR(1024) NOT NULL,
	sourcetype VARCHAR(30) NOT NULL
);
/* create DC table */
CREATE TABLE dc (
	id INT PRIMARY KEY DEFAULT nextval('serial'),
	aip_id INT NOT NULL REFERENCES aip (id),
	element VARCHAR(30) NOT NULL,
	value VARCHAR(1024) NOT NULL
);
/* create FILE table */
CREATE TABLE sourcedatafile (
	id INT PRIMARY KEY DEFAULT nextval('serial'), 
	aip_id INT NOT NULL REFERENCES aip (id),
	name VARCHAR(1024) NOT NULL
);
/* create LOCAT table */
CREATE TABLE sourcedatalocat (
	id INT PRIMARY KEY DEFAULT nextval('serial'),
	file_id INT NOT NULL REFERENCES sourcedatafile (id),
	location VARCHAR(1024) NOT NULL,
	sourcetype VARCHAR(30) NOT NULL
);
COMMIT;
BEGIN;
PREPARE aip_plan (varchar) AS
  INSERT INTO aip (ie_id) VALUES ($1);
PREPARE ie_plan (varchar, varchar, varchar) AS
  INSERT INTO metadatafile (aip_id, location, sourcetype) VALUES (
    (SELECT id FROM aip WHERE aip.ie_id=$1), $2, $3
  );
PREPARE file_plan (varchar, varchar) AS
  INSERT INTO sourcedatafile (aip_id, name) VALUES (
    (SELECT id FROM aip WHERE aip.ie_id=$1), $2
  );
PREPARE locat_plan (varchar, varchar, varchar, varchar) AS
  INSERT INTO sourcedatalocat (file_id, location, sourcetype) VALUES (
    (SELECT sourcedatafile.id FROM sourcedatafile,aip WHERE
    sourcedatafile.aip_id=aip.id AND aip.ie_id=$1 AND
    sourcedatafile.name=$2), $3, $4
  );
PREPARE dc_plan (varchar, varchar, varchar) AS
  INSERT INTO dc (aip_id, element, value) VALUES (
    (SELECT id FROM aip WHERE aip.ie_id=$1), $2, $3
  );
COMMIT;
BEGIN;
EXECUTE aip_plan ('V1-IE30441');
EXECUTE ie_plan ('V1-IE30441', 'V1-IE30441.xml', 'hdd');
EXECUTE file_plan ('V1-IE30441', 'V1-FL30444.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30444.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30444.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30443.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30443.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30443.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30446.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30446.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30446.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30445.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30445.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30445.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30448.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30448.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30448.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30447.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30447.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30447.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30455.xml');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30455.xml', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30455.xml', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30449.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30449.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30449.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30454.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30454.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30454.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30452.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30452.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30452.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30453.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30453.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30453.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30450.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30450.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30450.tif', 'hdd' );
EXECUTE file_plan ('V1-IE30441', 'V1-FL30451.tif');
EXECUTE locat_plan ('V1-IE30441', 'V1-FL30451.tif', '/permanent_storage/file/storage1/2013/03/26/file_1/V1-FL30451.tif', 'hdd' );
EXECUTE dc_plan ( 'V1-IE30441', 'dc:coverage', 'DE-14');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:coverage', '7.A.1869,angeb.32');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:relation', 'Drucke des 18. Jahrhunderts');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:relation', 'Projekt: Verzeichnis der im deutschen Sprachraum erschienenen Drucke des 18. Jahrhunderts (VD18)');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', 'oai:de:slub-dresden:db:id-340981210');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:format', '[4] Bl.');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', '340981210');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', 'http://digital.slub-dresden.de/id340981210');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', 'urn:nbn:de:bsz:14-db-id3409812108');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', '088741990');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:identifier', 'VD18 11664185');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:title', 'Facultatis Iuridicae, Decanus Ernestus Tenzell, J. U. D. Iudicii Provincialis Erfurtensis Assessor, Civitatis Consul Ac Syndicus Primarius ...');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:language', 'la');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:publisher', 'Groschius');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:date', '[1716]');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:subject', 'facuiudee');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:contributor', 'Tentzel, Ernst (Tentzel, Ernst)');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:contributor', 'Talheim, Johann Philipp (Talheim, Johann Philipp)');
EXECUTE dc_plan ( 'V1-IE30441', 'dc:contributor', '(Deutsche Forschungsgemeinschaft)');
COMMIT;

/* INSERT… */

-- BEGIN;
-- CREATE UNIQUE INDEX aip_index on aip (ie_id);
-- COMMIT;
----------------------------------------------------------------------------


== Installation

Das Script ist in Perl 5.14 geschrieben (älterer Perlversionen haben ua. 
Probleme mit UTF-8). Es verwendet die Perl-Module 'File::Basename', 
'File::Find', 'XML::XPath' und für Debugging 'Data::Dumper'.

Dem Script ist das Repository-Verzeichnis mitzugeben. Der Aufruf sieht so aus:

.Beispiel
[source,bash]
----------------------------------------------------------------------------
$> perl exit_strategy /permanent_storage/ >create_exit_database.sql
----------------------------------------------------------------------------

== Beispiel Durchführung Einspielung SQL-Script für Postgres-SQL

Um unter Postgres-SQL 9.1 die Exitstrategie durchzuführen, sind unter Debian 
Wheezy folgende Schritte notwendig footnote::[Benutzer 'exituser' soll
Datenbank 'exit_strategy' gehören]:

.Beispiel
[source,bash]
----------------------------------------------------------------------------
$user> sudo aptitude install postgresql
$user> su -c "su -s /bin/sh postgres"
$> createuser -dlr exituser
Soll die neue Rolle ein Superuser sein? (j/n) j
$> createdb exit_strategy -O exituser -E UTF8
$> exit
----------------------------------------------------------------------------

Das Script wird dann so eingespielt:

.Beispiel
[source,bash]
----------------------------------------------------------------------------
$user> su -c "su -s /bin/sh postgres"
$> psql -U exituser -d exit_strategy -f exit_strategy.sql \
             -L rosetta_exit.log 2> rosetta_exit.err 
----------------------------------------------------------------------------

Für weitere Informationen zu Postgres 9.1 siehe 
http://www.postgresql.org/docs/9.1/static/

== Abschätzungen

Nach ersten Tests verarbeitet das Perl-Script 277 AIPs in 112s, macht ca. 0,4s
pro AIP. Es wurden dabei ca. 5200 SQL-Anweisungen erzeugt, also ca. 19 pro AIP.
Das erzeugte SQL-File ist 387kB groß, pro AIP fallen also ca. 1,4kB an.

Bei anvisierten 20 Goobi Vorgängen pro Tag und Exit nach 5 Jahren würden sich
ff. Werte ergeben: 35600 AIPs, Dauer ca. 4h, ca. 68000 SQL Anweisungen, 49 MB
SQL-Datei.

PostgreSQL benötigte dann 5s um die 277 AIPs aus dem SQL-Script einzulesen,
hochgerechnet wäre die Datenbank dann in 11 min aufgebaut..

NOTE: Eine Exit-DB wäre demnach innerhalb von 10h prinzipiell wieder verfügbar.

== Probleme

=== UTF-8 Bereiche in Dublincore

Es ist elementar, daß die Metadaten aus ExLibris-Rosetta sauber sind und alle
Zeichen der verwendeten Dublincore-Felder als UTF-8 aus den Bereichen Basic 
Latin (U+0000 => U+007F), Latin-1 Supplement (U+0080 => U+00FF) und 
Latin-Extended-A (U+0100 => U+017F) und nicht aus anderen Bereichen stammen.

Beispielsweise wird das Zeichen '�' (U+FFFD) von Postgres 9.1 abgewiesen.

In dem Fall muß vor dem Exit eine Metadatenvalidierung innerhalb von 
Exlibris-Rosetta durchgeführt werden. In der Regel ist das Vorkommen von
Zeichen außerhalb der oben genannten Bereiche, wie '�' (U+FFFD), ein Hinweis
darauf, daß im Vorfeld ein Problem mit der Konvertierung zwischen UTF-8 und 
anderen Zeichenkodierungen vorgelegen hat. 

[NOTE]
====
Relevant ist ff. Seite:
http://docs.oracle.com/javase/7/docs/api/java/lang/Character.UnicodeBlock.html#forName%28java.lang.String%29[Unicode
Block in Java RegEx]
bzw. 
http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#sum[Unicode
Pattern in Java RegEx]

Genauer muß geprüft werden, ob ff. Unicode-Block verwendet wird: LATIN_1_SUPPLEMENT

In RegEx-Notation sieht das Bspw. so aus:

[source, java]
^[\u0x0000-\u0x00ff]+$

====

Wichtig ist, daß das PSQL-Kommando auf einer Shell mit aktivierter UTF-8
Unterstützung genutzt wird, dies kann über die Abfrage 'echo $LANG' geprüft
werden, als Rückgabe sollte 'de_DE.UTF-8' zurückgeliefert werden.

=== Fehlende Unterstützung mehrfacher Kopien

Zur Zeit wird nur eine Kopie einer Datei durch das Perl-Script unterstützt.
Sobald klar ist, wie diese Informationen in den AIP-Paketen hinterlegt sind,
sollte das Perl-script daran angepasst werden.

== Anmerkungen seitens ExLibris Rosetta

Leider ist es zur Zeit so, daß seitens ExLibris noch keine offizielle 
Dokumentation zur Rosetta eigenen Datenablage der AIPs im '/permanent_storage'
vorhanden ist.

Allerdings hat ExLibris auf einen Support Incident wie folgt geantwortet:

.Auszug aus Incident #16384-420304 SI Name: Overview / Explanation of AIP relevant files - information is requested
[NOTE]
====
As you know from SI 16384-418600: "All AIPs (a.k.a. Intellectual Entities) 
metadata including audit (provenance) information is stored on the disk in
Rosetta METS format." The actual place of the IE Rosetta METS XML files in the
file system is configured in the storage rules and definitions.

Home > Advanced Configuration > Repository > Storage Rules and Definitions
> Storage Group List > IE Group     

Storage media that contains the IE METS files
 
For example, on your staging server the NFS path to the storage 1 is 
'/permanent_storage/ie/storage1'.
 
The configured storages have the same structure:

'<root path><storage group><storage>/<year>/<month>/<day>/<1-999 numbered
subdirs with prefix>/'
 
Example:
'/permanent_storage/ie/storage1/2013/03/26/file_1/'
 
Here you find all versions of the IE Rosetta METS XML files, e.g.
'/permanent_storage/ie/storage1/2013/03/26/file_1/V1-IE31220.xml'
 
The prefix 'V1-' indicates that this is version #1 of the IE Rosetta METS XML
file. The link to the actual file streams is in the XML in the streamref
section. You have to make sure that you are using the highest (i.e. latest)
version of the METS.
  
With the information above you can develop an exit strategy which parses all
IE storage directories to find the IEs and their related file streams.
====


